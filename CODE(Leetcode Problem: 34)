class Solution(object):
    def get_lower_bound(self, nums, target):
        low, high = 0, len(nums)-1
        ans = -1
        while low <= high:
            mid = low + (high-low)//2
            if nums[mid] == target:
                ans = mid
                high = mid-1
            elif nums[mid] < target:
                low = mid + 1
            else:
                high = mid - 1
        return ans
    
    def get_upper_bound(self, nums, target):
        low, high = 0, len(nums)-1
        ans = -1
        while low <= high:
            mid = low + (high-low)//2
            if nums[mid] == target:
                ans = mid
                low = mid+1
            elif nums[mid] < target:
                low = mid + 1
            else:
                high = mid - 1
        return ans
        
    def searchRange(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        lower_bound = self.get_lower_bound(nums, target)
        upper_bound = self.get_upper_bound(nums, target)
        return [lower_bound, upper_bound]        
